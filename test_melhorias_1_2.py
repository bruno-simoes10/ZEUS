#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ Teste das Melhorias 1 e 2 do Sistema ZEUS

Melhoria 1: Expans√£o de Padr√µes de Linguagem Natural
Melhoria 2: Sistema de Sin√¥nimos e Varia√ß√µes Expandido

Baseado na rede mobiE e schema existente
"""

import sys
import time
from ZEUS import EVChargingFinder

def test_melhorias_1_2():
    """Testa as melhorias 1 e 2 implementadas no sistema ZEUS"""
    
    print("\n" + "="*80)
    print("üöÄ TESTE DAS MELHORIAS 1 e 2 - SISTEMA ZEUS")
    print("="*80)
    print("üìã Melhoria 1: Expans√£o de Padr√µes de Linguagem Natural")
    print("üìã Melhoria 2: Sistema de Sin√¥nimos e Varia√ß√µes Expandido")
    print("üîß Baseado na rede mobiE e schema existente")
    print("="*80)
    
    # Inicializar sistema com regex apenas
    finder = EVChargingFinder(use_regex_only=True)
    
    # Comandos de teste organizados por categoria
    comandos_teste = {
        "Padr√µes de Necessidade/Urg√™ncia": [
            "preciso de carregar o meu carro el√©trico em Lisboa",
            "necessito abastecer o ve√≠culo em Porto",
            "quero recarregar a viatura em Coimbra",
            "gostaria de energizar o EV em Braga",
            "desejo carregar o autom√≥vel em Aveiro",
            "procuro carregamento para tesla em Faro"
        ],
        
        "M√∫ltiplos Crit√©rios (Pre√ßo + Velocidade)": [
            "carregador barato e r√°pido em Lisboa",
            "posto econ√≥mico e potente no Porto",
            "esta√ß√£o acess√≠vel e veloz em Coimbra",
            "terminal em conta e forte em Braga"
        ],
        
        "Disponibilidade em Tempo Real": [
            "carregador dispon√≠vel agora em Lisboa",
            "posto livre neste momento no Porto",
            "esta√ß√£o aberta atualmente em Coimbra",
            "h√° terminal funcional em Braga?",
            "existe posto operacional em Aveiro?"
        ],
        
        "Tipos de Conectores mobiE": [
            "carregador type 2 em Lisboa",
            "posto tipo 2 no Porto",
            "esta√ß√£o mennekes em Coimbra",
            "terminal chademo em Braga",
            "carregador ccs em Aveiro"
        ],
        
        "Pot√™ncia Espec√≠fica": [
            "carregador 50kw ou mais em Lisboa",
            "posto 22 kilowatt no m√≠nimo no Porto",
            "esta√ß√£o 150kw pelo menos em Coimbra"
        ],
        
        "Redes Espec√≠ficas Portuguesas": [
            "carregador mobie em Lisboa",
            "posto mobiE no Porto",
            "esta√ß√£o rede mobie em Coimbra",
            "terminal galp electric em Braga",
            "carregador edp comercial em Aveiro",
            "supercharger tesla em Faro"
        ],
        
        "Contexto de Viagem": [
            "carregador no meu destino em Lisboa",
            "posto para ir ao Porto",
            "esta√ß√£o na viagem para Coimbra",
            "terminal no caminho para Braga",
            "carregador na rota at√© Aveiro"
        ],
        
        "Contexto Geogr√°fico": [
            "carregador no norte de portugal",
            "posto no centro de portugal",
            "esta√ß√£o na regi√£o de lisboa",
            "terminal na zona do porto",
            "carregador na √°rea de coimbra"
        ],
        
        "Urg√™ncia Temporal": [
            "preciso urgente carregador em Lisboa",
            "necessito j√° posto no Porto",
            "quero agora esta√ß√£o em Coimbra",
            "preciso imediatamente terminal em Braga"
        ],
        
        "Sin√¥nimos Expandidos": [
            "tomada el√©trica em Lisboa",
            "plug para EV no Porto",
            "socket de carregamento em Coimbra",
            "ponto mais em conta em Braga",
            "esta√ß√£o mais acess√≠vel em Aveiro",
            "terminal perfeito em Faro",
            "carregador recomendado em √âvora",
            "posto nas redondezas de Leiria",
            "esta√ß√£o ao lado de Viseu",
            "terminal junto a Set√∫bal"
        ]
    }
    
    # Estat√≠sticas
    total_comandos = sum(len(cmds) for cmds in comandos_teste.values())
    sucessos = 0
    falhas = 0
    tempo_total = 0
    resultados_por_categoria = {}
    
    print(f"\nüìä Iniciando teste com {total_comandos} comandos...\n")
    
    # Executar testes por categoria
    for categoria, comandos in comandos_teste.items():
        print(f"\nüîç === {categoria.upper()} ===")
        sucessos_categoria = 0
        
        for i, comando in enumerate(comandos, 1):
            print(f"\n[{categoria}] Teste {i}/{len(comandos)}: {comando}")
            
            try:
                inicio = time.time()
                resultado = finder.find_best_charger(comando)
                fim = time.time()
                tempo_execucao = fim - inicio
                tempo_total += tempo_execucao
                
                if resultado is not None:
                    print(f"‚úÖ SUCESSO ({tempo_execucao:.3f}s)")
                    # Verificar se o resultado tem a estrutura esperada
                    if isinstance(resultado, dict) and 'location' in resultado:
                        print(f"   üéØ Melhor op√ß√£o: {resultado['location']} - {resultado['address']}")
                        print(f"   üí∞ Pre√ßo: ‚Ç¨{resultado['price']}/kWh | ‚ö° Pot√™ncia: {resultado['power']}kW")
                    else:
                        print(f"   üéØ Resultado encontrado: {resultado}")
                    sucessos += 1
                    sucessos_categoria += 1
                else:
                    print(f"‚ùå FALHA ({tempo_execucao:.3f}s) - Nenhum resultado encontrado")
                    falhas += 1
                    
            except Exception as e:
                print(f"üí• ERRO ({tempo_execucao:.3f}s): {str(e)}")
                falhas += 1
        
        # Calcular taxa de sucesso da categoria
        taxa_categoria = (sucessos_categoria / len(comandos)) * 100
        resultados_por_categoria[categoria] = {
            'sucessos': sucessos_categoria,
            'total': len(comandos),
            'taxa': taxa_categoria
        }
        
        print(f"\nüìà {categoria}: {sucessos_categoria}/{len(comandos)} ({taxa_categoria:.1f}% sucesso)")
    
    # Relat√≥rio final
    print("\n" + "="*80)
    print("üìä RELAT√ìRIO FINAL - MELHORIAS 1 e 2")
    print("="*80)
    
    taxa_sucesso_geral = (sucessos / total_comandos) * 100
    tempo_medio = tempo_total / total_comandos
    
    print(f"\nüéØ RESULTADOS GERAIS:")
    print(f"   ‚Ä¢ Total de comandos testados: {total_comandos}")
    print(f"   ‚Ä¢ Sucessos: {sucessos}")
    print(f"   ‚Ä¢ Falhas: {falhas}")
    print(f"   ‚Ä¢ Taxa de sucesso: {taxa_sucesso_geral:.1f}%")
    print(f"   ‚Ä¢ Tempo m√©dio por comando: {tempo_medio:.3f}s")
    print(f"   ‚Ä¢ Tempo total: {tempo_total:.3f}s")
    
    print(f"\nüìà AN√ÅLISE POR CATEGORIA:")
    for categoria, stats in resultados_por_categoria.items():
        status = "‚úÖ" if stats['taxa'] >= 80 else "‚ö†Ô∏è" if stats['taxa'] >= 60 else "‚ùå"
        print(f"   {status} {categoria}: {stats['sucessos']}/{stats['total']} ({stats['taxa']:.1f}%)")
    
    # Avalia√ß√£o das melhorias
    print(f"\nüöÄ AVALIA√á√ÉO DAS MELHORIAS:")
    
    if taxa_sucesso_geral >= 85:
        print("   üèÜ EXCELENTE: Sistema compreende linguagem natural portuguesa fluentemente")
    elif taxa_sucesso_geral >= 70:
        print("   ‚úÖ BOM: Sistema funciona bem com a maioria dos padr√µes")
    elif taxa_sucesso_geral >= 50:
        print("   ‚ö†Ô∏è RAZO√ÅVEL: Sistema precisa de ajustes adicionais")
    else:
        print("   ‚ùå INSUFICIENTE: Sistema requer revis√£o significativa")
    
    print(f"\nüí° DESTAQUES DAS MELHORIAS:")
    print(f"   ‚Ä¢ Sistema de sin√¥nimos expandido com {len(finder.sinonimos)} categorias")
    print(f"   ‚Ä¢ Padr√µes de linguagem natural baseados na rede mobiE")
    print(f"   ‚Ä¢ Reconhecimento de m√∫ltiplos crit√©rios (pre√ßo + velocidade)")
    print(f"   ‚Ä¢ Detec√ß√£o de contexto geogr√°fico portugu√™s")
    print(f"   ‚Ä¢ Suporte a tipos de conectores espec√≠ficos")
    print(f"   ‚Ä¢ Integra√ß√£o com schema da base de dados existente")
    
    print(f"\nüéØ PR√ìXIMOS PASSOS RECOMENDADOS:")
    if taxa_sucesso_geral < 80:
        print(f"   ‚Ä¢ Ajustar padr√µes com menor taxa de sucesso")
        print(f"   ‚Ä¢ Expandir sin√¥nimos para termos espec√≠ficos")
    if tempo_medio > 0.1:
        print(f"   ‚Ä¢ Otimizar performance dos padr√µes regex")
    
    print(f"   ‚Ä¢ Implementar melhorias 3-10 do roadmap")
    print(f"   ‚Ä¢ Adicionar mais cidades √† base de dados")
    print(f"   ‚Ä¢ Desenvolver sistema de aprendizagem autom√°tica")
    
    print("\n" + "="*80)
    print("üéâ TESTE CONCLU√çDO - MELHORIAS 1 e 2 VALIDADAS")
    print("="*80)
    
    return {
        'taxa_sucesso': taxa_sucesso_geral,
        'tempo_medio': tempo_medio,
        'resultados_categoria': resultados_por_categoria,
        'total_comandos': total_comandos,
        'sucessos': sucessos,
        'falhas': falhas
    }

if __name__ == "__main__":
    print("üöÄ Iniciando teste das melhorias 1 e 2 do sistema ZEUS...")
    resultados = test_melhorias_1_2()
    
    # C√≥digo de sa√≠da baseado na taxa de sucesso
    if resultados['taxa_sucesso'] >= 80:
        sys.exit(0)  # Sucesso
    elif resultados['taxa_sucesso'] >= 60:
        sys.exit(1)  # Parcialmente bem-sucedido
    else:
        sys.exit(2)  # Necessita melhorias